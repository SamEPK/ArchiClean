R√©partition des t√¢ches - Projet Banque AVENIR
Fouad, Samuel, Quentin
üéØ FOUAD - Module Client & Authentification
Fonctionnalit√©s principales (~5 points)
Authentification
 Inscription utilisateur avec validation email
 Syst√®me de confirmation par lien
 Connexion / D√©connexion
 Gestion de session
Gestion des comptes bancaires
 Cr√©ation de compte avec g√©n√©ration IBAN unique et valide
 Suppression de compte
 Modification du nom personnalis√© du compte
Affichage de la liste des comptes
Op√©rations bancaires
Transfert entre comptes internes
 Calcul automatique du solde (d√©bits + cr√©dits)
 Historique des transactions
Architecture √† impl√©menter
Entit√©s (Domain Layer):
User (id, email, password, firstName, lastName, createdAt)
Account (id, iban, customName, balance, userId, createdAt)
Transaction (id, amount, type, fromAccountId, toAccountId, date)
Use Cases (Application Layer):
RegisterUser
LoginUser
CreateAccount
R√©partition des t√¢ches - Projet Banque AVENIR


Quentin ‚Äî Module Administration & Services bancaires (impl√©mentation minimale ajout√©e)

Fonctionnalit√©s impl√©ment√©es (minimum requis):
- Authentification directeur (use-case + in-memory repo + controller)
- Octroi de cr√©dits (calcul mensualit√©s constantes, repository in-memory)
- Calcul mensualit√© (utilitaire pour cr√©dit)
- Messagerie: envoi de message, cr√©ation conversation, assignation et transfert (in-memory)

Endpoints (controllers NestJS minimal) ‚Äî exemples d'usage PowerShell:

- Admin - register
	POST /admin/register
	Body: { id, email, password, firstName, lastName }

	Exemple PowerShell:
	Invoke-RestMethod -Method Post -Uri http://localhost:3000/admin/register -Body (@{ id='d1'; email='d@a.com'; password='pwd'; firstName='Dir'; lastName='E' } | ConvertTo-Json) -ContentType 'application/json'

- Admin - login
	POST /admin/login
	Body: { email, password }

	Exemple PowerShell:
	Invoke-RestMethod -Method Post -Uri http://localhost:3000/admin/login -Body (@{ email='d@a.com'; password='pwd' } | ConvertTo-Json) -ContentType 'application/json'

- Messaging - send message
	POST /messaging/send
	Body: { conversationId, senderId, content }

- Messaging - assign
	POST /messaging/assign
	Body: { convId, advisorId }

- Messaging - transfer
	POST /messaging/transfer
	Body: { convId, fromAdvisorId, toAdvisorId }

- Messaging - list open
	GET /messaging/open

Fichiers ajout√©s (rappel):
- src/domain/entities/BankDirector.ts
- src/domain/entities/Advisor.ts
- src/domain/entities/Credit.ts
- src/domain/entities/Message.ts
- src/domain/entities/Conversation.ts
- src/domain/repositories/IAdminRepository.ts
- src/domain/repositories/ICreditRepository.ts
- src/domain/repositories/IMessageRepository.ts
- src/infrastructure/repositories/in-memory/InMemoryAdminRepository.ts
- src/infrastructure/repositories/in-memory/InMemoryCreditRepository.ts
- src/infrastructure/repositories/in-memory/InMemoryMessageRepository.ts
- src/application/use-cases/AuthenticateDirector.ts
- src/application/use-cases/CalculateMonthlyPayment.ts
- src/application/use-cases/GrantCredit.ts
- src/application/use-cases/SendMessage.ts
- src/application/use-cases/AssignConversation.ts
- src/application/use-cases/TransferConversation.ts
- src/interface/nestjs/modules/admin.module.ts
- src/interface/nestjs/controllers/admin.controller.ts
- src/interface/nestjs/controllers/messaging.controller.ts

How to run tests (dev)
- Installer d√©pendances dev (si n√©cessaire):
	npm install --save-dev jest ts-jest @types/jest
- Lancer la suite de tests:
	npm test

Notes techniques et prochains pas recommand√©s:
- Remplacer le hash simple dans `AuthenticateDirector` par `bcrypt` pour la production.
- Ajouter un adaptateur MongoDB/SQL (Mongo*Repository / SQL*Repository) si tu veux persistance r√©elle.
- Int√©grer les controllers dans un bootstrap NestJS (`src/interface/nestjs/main.ts`) pour d√©marrer localement.
- Ajouter Swagger / OpenAPI pour documenter les endpoints.

--- Fin de la partie Quentin (d√©tails techniques ajout√©s)
